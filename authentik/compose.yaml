services:
  authentik-postgresql:
    container_name: authentik-postgresql
    image: postgres:12-alpine
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${AUTHENTIK_POSTGRESQL__PASSWORD}
      POSTGRES_USER: ${AUTHENTIK_POSTGRESQL__USER}
      POSTGRES_DB: ${AUTHENTIK_POSTGRESQL__NAME}
    volumes:
      - /var/lib/authentik/database:/var/lib/postgresql/data
    networks:
      - authentik
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    restart: unless-stopped

  authentik-redis:
    container_name: authentik-redis
    image: redis:alpine
    command: --save 60 1 --loglevel warning
    volumes:
      - /var/lib/authentik/redis:/data
    networks:
      - authentik
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    restart: unless-stopped

  authentik:
    container_name: authentik
    image: ghcr.io/goauthentik/server:2024.4.1
    labels:
      traefik.enable: true
      traefik.http.routers.authentik.entryPoints: websecure
      traefik.http.routers.authentik.tls: true
      traefik.http.routers.authentik.rule: Host(`id.bodkys.house`) || HostRegexp(`{subdomain:[a-z0-9]+}.bodkys.house`) && PathPrefix(`/outpost.goauthentik.io/`)
      traefik.http.routers.authentik.service: authentik
      traefik.http.services.authentik.loadbalancer.server.port: 9000
    command: server
    env_file:
      - .env
    networks:
      - authentik
    depends_on:
      - authentik-postgresql
      - authentik-redis
    restart: unless-stopped

  authentik-worker:
    container_name: authentik-worker
    image: ghcr.io/goauthentik/server:2024.4.1
    command: worker
    env_file:
      - .env
    networks:
      - authentik
    depends_on:
      - authentik-postgresql
      - authentik-redis
    restart: unless-stopped

networks:
  authentik:
    external: true
